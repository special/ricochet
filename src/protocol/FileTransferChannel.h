/* Ricochet - https://ricochet.im/
 * Copyright (C) 2015, John Brooks <john.brooks@dereferenced.net>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following disclaimer
 *      in the documentation and/or other materials provided with the
 *      distribution.
 *
 *    * Neither the names of the copyright owners nor the names of its
 *      contributors may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef PROTOCOL_FILETRANSFERCHANNEL_H
#define PROTOCOL_FILETRANSFERCHANNEL_H

#include "Channel.h"
#include "FileTransferChannel.pb.h"
#include <QPointer>

class QIODevice;

namespace Protocol
{

class FileTransferChannelPrivate;

class FileTransferChannel : public Channel
{
    Q_OBJECT
    Q_DISABLE_COPY(FileTransferChannel)
    Q_DECLARE_PRIVATE(FileTransferChannel)

public:
    /* Apply an insane (10TB) limit to file size to avoid being anywhere near
     * int64 overflow conditions. */
    static const qint64 MaxFileSize = Q_INT64_C(10995116277760);
    static const int FilenameMaxCharacters = 500;
    static const int TransferIdSize = 16;

    explicit FileTransferChannel(Direction direction, Connection *connection);

    /* Name of the file for this transfer. Provided by the sender.
     *
     * For an inbound transfer, the file name has been sanitized and is safe
     * for use on the filesystem.
     */
    QString fileName() const;
    /* For an outbound transfer, set the name of the file. Must not
     * exceed FilenameMaxCharacters in length.
     */
    void setFileName(const QString &filename);
    quint64 fileSize() const;
    /* For an outbound transfer, set the size of the file */
    void setFileSize(quint64 fileSize);
    /* Unique identifier for this file transfer, randomly generated by
     * the sender. Must be exactly TransferIdSize bytes in length.
     *
     * Transfer ids may be reused for a resume of the same file transfer
     * from the same sender.
     */
    QByteArray transferId() const;
    /* For an outbound transfer, set the id of the file transfer. Must
     * be exactly TransferIdSize bytes in length. */
    void setTransferId(const QByteArray &transferId);

public slots:
    /* For an inbound file transfer, accept the offer and start the transfer.
     */
    void start();
    /* Cancel any file transfer immediately by user action. May be used
     * by either peer and at any time.
     */
    void cancel();

signals:
    void started();
    // XXX Is this emitted for non-user cancel? how are errors communicated?
    void canceled();
    void finished();

protected:
    virtual bool allowInboundChannelRequest(const Data::Control::OpenChannel *request, Data::Control::ChannelResult *result);
    virtual bool allowOutboundChannelRequest(Data::Control::OpenChannel *request);
    virtual void receivePacket(const QByteArray &packet);

    void handleTransferStart(const Data::FileTransfer::TransferStart &message);
    void handleTransferCancel(const Data::FileTransfer::TransferCancel &message);
    void handleTransferFinished(const Data::FileTransfer::TransferFinished &message);
};

}

#endif
